/*
 * xnat-openid-auth-plugin: build.gradle
 *
 */

buildscript {
    ext {
        vXnat = "1.8.0"
    }
}

plugins {
    id "application"
    id "eclipse"
    id "groovy"
    id "idea"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "com.dorongold.task-tree" version "1.5"
    id "com.palantir.git-version" version "0.12.3"
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.nrg.xnat.build.xnat-data-builder" version "1.8.0"
}

group "au.edu.qcif.xnat.openid"
version "1.1.1-SNAPSHOT"
description "XNAT OpenID Authentication Provider"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

mainClassName = "ValidateLdap"

configurations {
    implementation.extendsFrom(implementAndInclude)

    all {
        exclude group: "com.sun.media", module: "jai_imageio"
        exclude group: "javax.sql", module: "jdbc-stdext"
        exclude group: "javax.transaction", module: "jta"
        exclude group: "edu.ucar", module: "netcdf"
    }
    testCompile {
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "org.slf4j", module: "slf4j-simple"
        exclude group: "edu.ucar", module: "netcdf"
    }
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    compileOnly "org.nrg.xnat:web"
    compileOnly "org.springframework:spring-web"
    compileOnly "org.springframework.security:spring-security-config"
    compileOnly "org.springframework.security:spring-security-web"
	compileOnly "org.springframework.security.oauth:spring-security-oauth2"
    compileOnly "org.springframework.security:spring-security-jwt"
    compileOnly "org.apache.commons:commons-lang3"
    compileOnly "org.slf4j:slf4j-api"

    testImplementation "junit:junit"
    testImplementation "org.springframework:spring-test"
    testImplementation "org.nrg.xnat:web:${vXnat}"
    testImplementation "com.github.tomakehurst:wiremock:2.21.0"
    testImplementation "org.mockito:mockito-core:2.25.0"
    
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
    manifest {
        attributes "Application-Name": project.description,
                   "Build-Date": new Date(),
                   "Implementation-Sha": gitVersion(),
                   "Implementation-Version": project.version
    }
}

compileJava {
    options.fork = false
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
    }
}

task fatJar(type: Jar) {
    zip64 true
    archiveBaseName.set project.name + "-all"
    from {
        configurations.implementAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA"
    }
    with jar
}

sourceSets {
    main {
        java {
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir "build/xnat-generated/src/main/resources"
        }
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}

/*
def sonatypeUsername = hasProperty("SONATYPE_USERNAME") ? sonatypeUsername : System.getProperty("SONATYPE_USERNAME")
def sonatypePassword = hasProperty("SONATYPE_USERNAME") ? sonatypePassword : System.getProperty("SONATYPE_PASSWORD")

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://dev.redboxresearchdata.com.au/nexus/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.version = project.version
            pom.artifactId = rootProject.name
            pom.groupId = project.group
        }
    }
}
*/
